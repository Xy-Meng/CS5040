#include <cstdlib>     // Provides EXIT_SUCCESS
#include <iostream>  // Provides cin, cout
#include <string>
#include <sstream>
#include <cmath>

using namespace std;

int moves = 0;
void Hanoi(int diskSize, int source, int dest, int spare){ 
    moves ++;
	
   if(diskSize == 1)
   { 
      cout << "Move disc "<< diskSize << " from " << source << " to " << dest << endl; 
   }
   else
   { 
      Hanoi(diskSize-1, source, spare, dest); 
      cout << "Move disc " << diskSize << " from " << source << " to " << dest << endl; 
      Hanoi(diskSize-1, spare, dest, source); 
   } 
} 



void numbers(ostream& outs, const string& prefix, unsigned int levels)
{
    if (levels==0){
         outs<<prefix<<endl;
    }
    else{
            for (int j=1;j<10;j++){
                string s= prefix;
                ostringstream stm;
                stm << j ;
                s=s+stm.str()+".";
                numbers(cout, s,levels-1);      
                }
         }
}

void pattern(ostream& outs, unsigned int n, unsigned int i)
// Precondition: n is a power of 2 greater than zero.
// Postcondition: A pattern based on the above example has been
// printed to the ostream outs. The longest line of the pattern has
// n stars beginning in column i of the output. For example,
// The above pattern is produced by the call pattern(cout, 8, 0).
{
    int num = log(n)/log(2);
       if(num>=0){
            int newNum = pow(2.0, num-1);
			int nextNumber = int(newNum); 
			pattern(outs,nextNumber, i);
			for (int k = 0; k < i; k++)  
                outs<<" ";
			for (int k = 0; k < n; k++) 
                outs<< "* ";
			 outs<< endl;
			pattern(outs,nextNumber, i+n);
       }
    /*if(n != 0) 
  {
  pattern (outs,n/2,i);
     for (int i = 0; i < i; i++) { outs << " "; }
     for (int j = 0; j < n; j++) { outs << "* "; }  
     cout << endl; 
     pattern(outs,n/2, i+1);
  }*/
}


int main( )
{
    /*Hanoi(3,1,3,2);
    cout << "It took " << moves << " moves. " << endl;*/
    
    numbers(cout,"madna",2);
    
    pattern(cout, 8,0);
 
    return EXIT_SUCCESS;
}
